// <auto-generated />
using System;
using Bridge.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bridge.Data.Migrations
{
    [DbContext(typeof(SyncDbContext))]
    partial class SyncDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Bridge.Data.GitLabProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("GitLabProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("PathWithNamespace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjectSyncId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectSyncId")
                        .IsUnique();

                    b.ToTable("GitLabProjects");
                });

            modelBuilder.Entity("Bridge.Data.IssueMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CanonicalSnapshot")
                        .HasColumnType("text");

                    b.Property<long>("GitLabIssueId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastGitLabEventUuid")
                        .HasColumnType("text");

                    b.Property<int>("ProjectSyncId")
                        .HasColumnType("integer");

                    b.Property<int>("RedmineIssueId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GitLabIssueId")
                        .IsUnique();

                    b.HasIndex("ProjectSyncId");

                    b.HasIndex("RedmineIssueId")
                        .IsUnique();

                    b.ToTable("IssueMappings");
                });

            modelBuilder.Entity("Bridge.Data.ProjectSync", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("LastSyncUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RedmineIdentifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RedmineProjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RedmineProjectId")
                        .IsUnique();

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Bridge.Data.StatusRedmine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RedmineStatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RedmineStatusId")
                        .IsUnique();

                    b.ToTable("StatusesRedmine");
                });

            modelBuilder.Entity("Bridge.Data.TrackerRedmine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RedmineTrackerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RedmineTrackerId")
                        .IsUnique();

                    b.ToTable("TrackersRedmine");
                });

            modelBuilder.Entity("Bridge.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("GitLabUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("RedmineUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GitLabUserId")
                        .IsUnique();

                    b.HasIndex("RedmineUserId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Bridge.Data.GitLabProject", b =>
                {
                    b.HasOne("Bridge.Data.ProjectSync", "ProjectSync")
                        .WithOne("GitLabProject")
                        .HasForeignKey("Bridge.Data.GitLabProject", "ProjectSyncId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectSync");
                });

            modelBuilder.Entity("Bridge.Data.IssueMapping", b =>
                {
                    b.HasOne("Bridge.Data.ProjectSync", "ProjectSync")
                        .WithMany()
                        .HasForeignKey("ProjectSyncId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectSync");
                });

            modelBuilder.Entity("Bridge.Data.ProjectSync", b =>
                {
                    b.Navigation("GitLabProject");
                });
#pragma warning restore 612, 618
        }
    }
}
