// <auto-generated />
using System;
using Bridge.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bridge.Migrations
{
    [DbContext(typeof(SyncDbContext))]
    [Migration("20250919160615_AddTrackersAndUserSyncs_AndCompositeIssue3")]
    partial class AddTrackersAndUserSyncs_AndCompositeIssue3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("Bridge.Data.GitLabProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("GitLabProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PathWithNamespace")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectSyncId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectSyncId")
                        .IsUnique();

                    b.ToTable("GitLabProjects");
                });

            modelBuilder.Entity("Bridge.Data.IssueMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fingerprint")
                        .HasColumnType("TEXT");

                    b.Property<long>("GitLabIssueId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("LastSyncedUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectSyncId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RedmineIssueId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GitLabIssueId")
                        .IsUnique();

                    b.HasIndex("ProjectSyncId");

                    b.HasIndex("RedmineIssueId")
                        .IsUnique();

                    b.ToTable("IssueMappings");
                });

            modelBuilder.Entity("Bridge.Data.ProjectMembership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectSyncId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ProjectSyncId", "UserId", "Source")
                        .IsUnique();

                    b.ToTable("ProjectMemberships");
                });

            modelBuilder.Entity("Bridge.Data.ProjectSync", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LastSyncUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RedmineIdentifier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RedmineProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RedmineProjectId")
                        .IsUnique();

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Bridge.Data.Tracker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RedmineTrackerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RedmineTrackerId")
                        .IsUnique();

                    b.ToTable("Trackers");
                });

            modelBuilder.Entity("Bridge.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<int?>("GitLabUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GitLabUsername")
                        .HasColumnType("TEXT");

                    b.Property<string>("RedmineLogin")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RedmineUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GitLabUserId")
                        .IsUnique();

                    b.HasIndex("RedmineUserId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Bridge.Data.GitLabProject", b =>
                {
                    b.HasOne("Bridge.Data.ProjectSync", "ProjectSync")
                        .WithOne("GitLabProject")
                        .HasForeignKey("Bridge.Data.GitLabProject", "ProjectSyncId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectSync");
                });

            modelBuilder.Entity("Bridge.Data.IssueMapping", b =>
                {
                    b.HasOne("Bridge.Data.ProjectSync", "ProjectSync")
                        .WithMany()
                        .HasForeignKey("ProjectSyncId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectSync");
                });

            modelBuilder.Entity("Bridge.Data.ProjectMembership", b =>
                {
                    b.HasOne("Bridge.Data.ProjectSync", "ProjectSync")
                        .WithMany()
                        .HasForeignKey("ProjectSyncId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bridge.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectSync");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bridge.Data.ProjectSync", b =>
                {
                    b.Navigation("GitLabProject");
                });
#pragma warning restore 612, 618
        }
    }
}
